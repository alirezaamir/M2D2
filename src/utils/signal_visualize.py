import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from utils.data import build_dataset_pickle as test_dataset
from utils.data import get_non_seizure_signal, get_epilepsiae_test
from utils.params import pat_list
import seaborn as sns


def load_model(test_patient, model_name):
    arch = 'vae_free'
    subdirname = "../../temp/vae_mmd/integrated/{}/{}/{}".format(1024, arch, model_name)
    save_path = '{}/model/test_{}/saved_model/'.format(subdirname, test_patient)
    trained_model = tf.keras.models.load_model(save_path)
    return trained_model


def predict_(test_patient, model_proposed, model_baseline):
    sessions = test_dataset(test_patient, root='../../')
    for node in sessions.keys():
        STATE_LEN = 899

        X = sessions[node]['data']
        y_true = sessions[node]['label']
        print(y_true.shape)
        minutes = (y_true.shape[0] + 1) // 15

        if np.sum(y_true) == 0:
            continue

        # X_section = np.expand_dims(X, 0)
        # X_edge = get_non_seizure_signal(test_patient, state_len=STATE_LEN, root='../..')
        # X_section = np.concatenate((X_edge, X_section, X_edge), axis=1)
        #
        # out = model_proposed.predict(X_section)[0, STATE_LEN:STATE_LEN + minutes * 15, :]
        # print(np.where(out > 0.5))
        # out_baseline = model_baseline.predict(X_section)[0, STATE_LEN:STATE_LEN + minutes * 15, :]
        # print(np.where(out_baseline > 0.5))
        # t_out = np.linspace(0, minutes, minutes * 15)

        X_20min = np.reshape(X, newshape=(-1, 2))[:256 * minutes * 60]
        t = np.linspace(0, minutes, X_20min.shape[0])

        y_non_zero = np.where(y_true > 0, 1, 0)
        y_diff = np.diff(y_non_zero)
        start_points = np.where(y_diff > 0)[0]
        stop_points = np.where(y_diff < 0)[0]

        plt.figure(figsize=(15, 6))
        plt.plot(t, 0.35 * (X_20min[:, 0]) + 10, linewidth=0.3, c='dimgray')
        plt.plot(t, 0.35 * (X_20min[:, 1]) + 20, linewidth=0.3, c='dimgray')
        for seizure_start, seizure_stop in zip(start_points, stop_points):
            plt.axvspan(t[seizure_start * 1024], t[seizure_stop * 1024], color='r', alpha=0.5)
        # plt.plot(t_out, out * 10 + 34, c='k', marker='o', markersize=1.2)
        # plt.plot(t_out, out_baseline * 10 + 50, c='k', marker='o', markersize=1.2)

        plt.grid(b=True, c='r', which='major', lw=0.5, axis='x')
        plt.grid(b=True, c='r', which='major', lw=0.2, axis='y')
        plt.grid(b=True, c='r', which='minor', lw=0.2)
        plt.xticks(ticks=np.arange(0, minutes + 1, step=5),
                   labels=["{}:00".format(str(i)) for i in np.arange(0, minutes + 1, step=5)], fontsize=12)
        plt.xlim([0, minutes])
        plt.yticks(ticks=[10, 20, 34, 38, 44, 50, 54, 60],
                   labels=['F8-T8', 'F7-T7', '0', 'Proposed', '1', '0', 'Baseline', '1'], fontsize=14)
        plt.ylim([0, 30])
        plt.minorticks_on()
        plt.xlabel('Time (min)', fontsize=14)

        # plt.show()
        plt.savefig("../../output/signals/{}".format(node))


proposed_chb_loocv = np.dot(
    [0, 0, 0, 0, 0, 0, 0, 94, 11, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 1590, 380, 3156, 1024,
     659, 340, 927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2752, 3, 0, 0, 0, 0, 0, 2, 0, 3, 0, 71, 0, 0, 1, 153,
     0, 6, 243, 1, 28, 0, 0, 1, 25, 20, 634, 161, 456, 618, 0, 173, 593, 238, 297, 0, 630, 67, 77, 113,
     2, 0, 254, 69, 0, 0, 262, 0, 594, 5, 0, 325, 0, 38, 219, 579, 300, 474, 296, 0, 0, 219, 0, 495,
     667, 223, 0, 181, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0], 4)
bvib_chb_loocv = np.dot([0, 0, 0, 0, 0, 0, 0, 89, 38, 0, 0, 348, 0, 0, 0, 0, 1943, 106, 0, 0, 0, 0, 0, 0, 1659, 421, 680,
                   292, 101, 2927, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
                   0, 783, 0, 25, 243, 1, 50, 0, 426, 0, 140, 27, 634, 102, 0, 737, 0, 441, 538, 185, 105, 134, 211,
                   212, 18, 63, 249, 33, 427, 192, 0, 30, 316, 240, 193, 66, 80, 267, 0, 20, 28, 149, 303, 6, 137,
                   0,
                   0, 222, 57, 497, 129, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 48, 0, 0, 0, 258, 0, 0], 4)
bmmd_chb_loocv = np.dot([0, 0, 0, 0, 0, 0, 0, 86, 14, 11, 17, 339, 578, 9, 5, 0, 346, 104, 0, 0, 0, 0, 35, 0, 54, 419, 3105,
                 362, 653, 824, 1903, 46, 0, 0, 0, 0, 0, 0, 0, 0, 51, 2724, 366, 791, 460, 0, 184, 673, 1230, 0, 5,
                 647, 452, 6, 85, 139, 739, 19, 7, 6, 1, 93, 680, 184, 86, 178, 29, 90, 9, 0, 675, 0, 442, 565, 129,
                 247, 6, 543, 211, 615, 124, 324, 113, 137, 70, 131, 30, 285, 171, 95, 90, 423, 205, 150, 73, 29,
                 101,
                 463, 501, 185, 0, 0, 222, 13, 11, 129, 596, 0, 0, 0, 63, 460, 0, 7, 220, 0, 87, 280, 135, 459, 0,
                 0,
                 243, 254, 0, 0], 4)

bfet_chb_loocv = np.dot(
    [0, 0, 0, 0, 0, 0, 3, 0, 87, 13, 0, 0, 0, 0, 0, 0, 0, 306, 107, 0, 0, 0, 0, 0, 0, 61, 405, 2631, 1032, 94, 14, 185,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 436, 432, 0, 0, 160, 0, 97, 0, 49, 50, 0, 3, 0,
     140, 26, 32, 102, 282, 619, 0, 110, 225, 185, 280, 269, 211, 243, 55, 149, 0, 2, 0, 23, 2, 95, 314, 0, 193, 0, 0,
     405, 0, 20, 183, 43, 303, 8, 183, 0, 0, 184, 7, 224, 0, 230, 9, 460, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 463, 0,
     0, 0, 252, 0, 0], 4)

# print(np.where(manual > 3600))
bfet_chb_unseen = np.dot(
    [3, 314, 166, 573, 52, 12, 40, 0, 238, 45, 0, 39, 0, 227, 107, 42, 196, 169, 143, 1, 0, 55, 265, 640, 59, 70,
     0, 0, 0, 0, 658, 40, 0, 209, 413, 107, 338, 670, 217, 156, 2, 195, 132, 307, 181, 0, 141, 158, 275, 402,
     594, 352, 0, 80, 58, 214, 0, 7, 25, 0, 298, 3, 13, 1, 624, 0, 543, 0, 509, 511, 6, 339, 8, 124, 254, 142,
     344, 22, 552, 97, 0, 0, 0, 9, 296, 32, 0, 0, 0, 0, 0, 303, 454, 102, 14, 23, 31, 56, 38, 84, 241, 523, 656,
     250, 0, 225, 0, 69, 279, 0, 0, 137, 341, 416, 0, 406, 298, 158, 0, 147, 111, 0, 0, 0, 0, 24, 0, 0, 450, 306,
     0, 0, 0, 532, 148, 279, 544, 29, 25, 0, 61, 14, 0, 98, 208, 0, 4, 600, 0, 9, 0, 0, 242, 128, 241, 133, 0, 2,
     136, 0, 0, 0, 78, 0, 0, 647, 463, 0, 801, 508, 6, 0, 345, 468, 14, 0, 449, 0, 157, 46, 379, 174, 274, 85,
     371, 0, 482, 226, 140, 0, 0, 375, 0, 0, 0, 0, 107, 43, 332, 593, 0, 505, 268, 105, 142, 0, 0, 466, 0, 0, 0,
     0, 466, 270, 93, 0, 27, 428, 256, 84, 140, 164, 363, 95, 540, 782, 0, 3, 395, 266, 436, 17, 0, 0, 10, 7, 0,
     107, 0, 0, 0, 0, 222, 61, 773, 207, 0, 0, 398, 0, 456, 201, 33, 0, 639, 40, 0, 154, 0, 389, 0, 0], 4)

proposed_chb_unseen = np.dot(
    [10, 314, 166, 0, 0, 2, 574, 2, 12, 138, 0, 0, 0, 0, 177, 9, 195, 289, 0, 3, 0, 0, 264, 10, 151, 0, 0, 0, 0, 0,
     0, 0, 0, 302, 413, 71, 103, 52, 128, 392, 62, 203, 233, 254, 5, 108, 77, 52, 107, 401, 647, 84, 11, 209, 163,
     208, 18, 102, 23, 42, 106, 4, 0, 7, 625, 0, 220, 0, 508, 0, 283, 115, 149, 124, 827, 22, 329, 438, 552, 206, 0,
     0, 0, 233, 6, 9, 0, 0, 0, 0, 0, 0, 397, 161, 76, 17, 34, 61, 39, 24, 786, 2, 38, 250, 0, 82, 0, 0, 303, 0, 36,
     334, 341, 445, 0, 292, 9, 158, 0, 509, 312, 0, 0, 0, 0, 12, 0, 0, 78, 4, 0, 0, 433, 202, 148, 330, 544, 328,
     319, 0, 60, 18, 0, 0, 0, 0, 23, 148, 0, 0, 0, 0, 0, 0, 246, 282, 0, 0, 2, 0, 0, 0, 0, 0, 0, 556, 463, 0, 0,
     508, 171, 0, 345, 0, 0, 0, 505, 0, 611, 8, 351, 156, 88, 100, 239, 141, 7, 189, 638, 0, 0, 125, 0, 0, 0, 0,
     440, 235, 295, 0, 0, 31, 0, 0, 284, 0, 0, 465, 0, 0, 0, 0, 57, 277, 217, 0, 220, 243, 256, 423, 397, 0, 0, 120,
     103, 526, 234, 0, 199, 489, 432, 17, 0, 0, 136, 5, 0, 0, 0, 135, 0, 0, 201, 850, 726, 0, 0, 0, 513, 0, 0, 89,
     0, 0, 0, 0, 0, 0, 0, 601, 0, 0], 4)
bvib_chb_unseen = np.dot(
    [11, 313, 0, 515, 450, 9, 9, 13, 235, 8, 176, 145, 37, 138, 170, 222, 196, 111, 55, 265, 0, 19, 264, 717, 206,
     0, 52, 730, 71, 771, 658, 0, 525, 209, 20, 85, 249, 132, 258, 117, 3, 198, 132, 9, 10, 78, 123, 32, 266, 402,
     265, 100, 8, 56, 202, 337, 0, 211, 23, 41, 104, 3, 200, 6, 624, 0, 537, 482, 208, 502, 348, 84, 33, 124, 822,
     146, 336, 429, 532, 148, 0, 217, 0, 1, 41, 0, 71, 0, 78, 53, 0, 76, 138, 162, 76, 590, 24, 54, 38, 148, 3, 2,
     304, 250, 491, 324, 0, 69, 315, 0, 0, 133, 244, 443, 198, 482, 0, 0, 472, 631, 312, 30, 0, 0, 0, 24, 0, 480,
     666, 287, 10, 0, 664, 326, 155, 224, 379, 45, 491, 26, 62, 18, 0, 99, 91, 0, 35, 703, 203, 9, 3, 162, 244, 127,
     241, 411, 43, 477, 138, 302, 13, 0, 89, 397, 0, 221, 290, 686, 0, 506, 32, 0, 734, 25, 52, 557, 535, 363, 209,
     7, 383, 237, 605, 86, 227, 0, 21, 24, 546, 0, 88, 362, 680, 324, 132, 0, 100, 427, 332, 777, 227, 30, 453, 0,
     142, 6, 46, 465, 0, 0, 352, 36, 562, 285, 110, 0, 96, 255, 292, 22, 401, 109, 0, 112, 504, 516, 121, 135, 173,
     384, 435, 17, 453, 596, 0, 8, 378, 347, 8, 19, 191, 0, 221, 61, 725, 208, 0, 660, 553, 0, 7, 84, 86, 0, 544,
     26, 0, 124, 421, 8, 599, 93], 4)

bmmd_chb_unseen = np.dot(
    [19, 310, 78, 2, 12, 107, 59, 5, 231, 135, 166, 305, 524, 7, 167, 3, 199, 255, 55, 260, 0, 15, 256, 721, 151, 0,
     57, 0, 80, 0, 661, 17, 456, 207, 417, 395, 98, 125, 255, 160, 31, 198, 136, 22, 8, 44, 408, 152, 179, 398, 262,
     182, 0, 55, 173, 333, 0, 307, 21, 42, 99, 0, 14, 1, 207, 348, 535, 486, 522, 516, 70, 303, 133, 113, 103, 112,
     569, 434, 549, 256, 43, 492, 14, 8, 0, 0, 79, 0, 77, 22, 0, 299, 451, 159, 16, 270, 29, 63, 20, 88, 7, 228,
     326, 251, 493, 585, 0, 563, 44, 25, 2, 136, 345, 402, 164, 1, 5, 162, 242, 509, 115, 35, 200, 14, 236, 21, 277,
     455, 312, 448, 800, 296, 668, 111, 0, 322, 542, 361, 21, 152, 172, 29, 202, 219, 90, 17, 11, 51, 79, 0, 693,
     264, 335, 72, 791, 410, 578, 481, 2, 298, 237, 0, 86, 184, 227, 224, 280, 681, 791, 502, 36, 242, 27, 30, 12,
     560, 450, 370, 169, 383, 340, 471, 276, 232, 0, 19, 222, 572, 189, 171, 364, 89, 100, 309, 11, 111, 36, 110,
     752, 0, 28, 450, 124, 143, 4, 41, 543, 568, 14, 0, 45, 462, 662, 107, 191, 19, 204, 292, 17, 250, 104, 245, 7,
     765, 676, 266, 219, 173, 380, 20, 15, 0, 238, 148, 154, 9, 250, 0, 43, 188, 0, 335, 84, 771, 208, 402, 422,
     541, 477, 269, 233, 5, 40, 548, 23, 107, 178, 225, 419, 785, 0], 4)

bfcn_chb_loocv = np.dot(
    [0, 0, 0, 0, 0, 0, 0, 91, 13, 0, 0, 0, 0, 0, 0, 0, 1943, 1889, 0, 0, 0, 0, 0, 0, 49, 2299, 121, 2332, 418, 3115,
     1939, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 161, 0, 80, 117, 47, 50, 0,
     449, 0, 140, 25, 634, 47, 180, 737, 0, 603, 589, 185, 24, 336, 343, 138, 512, 46, 133, 541, 398, 243, 0, 30, 227,
     0, 0, 0, 0, 387, 242, 0, 0, 580, 111, 6, 219, 0, 0, 232, 0, 235, 70, 466, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
     461, 0, 0, 0, 456, 64, 483]
    , 4)
bfcn_chb_unseen = np.dot(
    [24, 313, 81, 589, 0, 4, 587, 13, 0, 137, 0, 0, 36, 138, 170, 195, 294, 446, 0, 157, 0, 51, 264, 717, 165, 0, 0, 0,
     130, 0, 0, 0, 10, 411, 358, 292, 330, 636, 258, 117, 62, 199, 119, 9, 181, 0, 106, 131, 348, 406, 631, 373, 8, 81,
     202, 337, 0, 331, 22, 41, 0, 19, 735, 6, 624, 0, 538, 0, 0, 502, 228, 63, 33, 133, 822, 135, 344, 438, 468, 94, 0,
     0, 0, 7, 0, 638, 0, 0, 708, 0, 0, 0, 447, 0, 76, 590, 20, 64, 23, 89, 3, 2, 304, 142, 491, 588, 0, 636, 282, 0, 14,
     462, 18, 443, 0, 427, 0, 15, 0, 548, 312, 0, 0, 0, 0, 547, 0, 0, 334, 223, 12, 0, 664, 112, 148, 224, 682, 336,
     147, 26, 61, 185, 0, 0, 0, 0, 16, 669, 0, 0, 0, 0, 0, 0, 52, 0, 2, 70, 5, 302, 0, 0, 0, 0, 0, 742, 510, 0, 0, 506,
     698, 0, 98, 5, 14, 55, 382, 363, 598, 7, 0, 280, 605, 8, 240, 106, 21, 24, 545, 0, 0, 101, 681, 0, 0, 0, 212, 39,
     114, 0, 28, 30, 268, 0, 35, 6, 0, 516, 0, 0, 0, 0, 305, 285, 695, 0, 27, 198, 0, 332, 401, 109, 0, 0, 504, 29, 121,
     3, 199, 265, 436, 17, 419, 0, 0, 9, 253, 347, 0, 0, 89, 0, 222, 109, 724, 597, 0, 0, 0, 0, 0, 84, 0, 0, 110, 0, 0,
     527, 0, 305, 0, 0]
    , 4)

# print(np.where(FCN > 3600))


proposed_epilepsiae_loocv  = np.dot(   [3, 0, 0, 0, 0, 5, 0, 61, 0, 307, 0, 0, 0, 0, 0, 3, 195, 0, 0, 0, 0, 0, 261, 531, 0, 96, 0, 0, 0, 0, 0, 0, 13, 412, 10, 426, 666, 10, 136, 158, 60, 10, 42, 4, 11, 24, 164, 261, 620, 114, 265, 338, 745, 142, 48, 201, 1, 22, 27, 42, 318, 22, 7, 1, 627, 0, 533, 0, 0, 106, 268, 301, 95, 66, 416, 20, 372, 430, 6, 145, 0, 0, 0, 7, 0, 6, 0, 0, 0, 55, 0, 0, 55, 162, 6, 8, 28, 47, 23, 85, 0, 0, 405, 125, 0, 236, 0, 647, 315, 0, 5, 130, 12, 0, 0, 378, 0, 142, 0, 514, 120, 0, 0, 0, 0, 548, 0, 0, 79, 0, 0, 0, 602, 402, 145, 427, 379, 317, 388, 0, 79, 789, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 454, 0, 0, 142, 32, 0, 0, 0, 0, 0, 267, 0, 201, 10, 355, 209, 476, 0, 0, 0, 16, 24, 1, 0, 0, 196, 0, 0, 1, 0, 83, 430, 0, 0, 27, 844, 0, 0, 602, 0, 0, 322, 0, 0, 0, 0, 549, 666, 861, 0, 3, 369, 112, 217, 395, 0, 0, 134, 46, 439, 236, 0, 0, 0, 430, 0, 450, 0, 0, 0, 473, 0, 0, 1, 0, 0, 468, 61, 725, 0, 0, 530, 0, 0, 0, 432, 0, 0, 0, 0, 0, 395, 0, 316, 0, 0], 4)
# proposed_epilepsiae_unseen = np.dot(    [0, 0, 0, 0, 0, 0, 0, 0, 88, 46, 0, 0, 0, 0, 0, 0, 0, 23, 109, 0, 0, 0, 0, 0, 0, 54, 428, 18, 1150, 210, 45, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 1, 0, 0, 158, 0, 86, 330, 65, 29, 0, 430, 0, 115, 26, 669, 8, 490, 611, 0, 609, 440, 287, 84, 131, 291, 430, 16, 123, 318, 539, 0, 9, 661, 17, 316, 0, 0, 7, 655, 324, 0, 14, 375, 576, 8, 4, 190, 0, 0, 0, 1, 222, 15, 236, 662, 457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 636, 0, 0, 0, 254, 0, 0], 4)
bfet_epilepsiae_unseen =     np.dot(    [250, 33, 0, 198, 565, 0, 0, 0, 764, 78, 0, 76, 253, 0, 0, 435, 0, 531, 0, 308, 0, 106, 5, 0, 740, 0, 286, 207, 222, 0, 0, 31, 0, 0, 241, 734, 142, 34, 0, 33, 0, 405, 0, 109, 0, 195, 0, 0, 0, 0, 0, 102, 0, 0, 0, 2, 0, 1272, 10, 0, 30, 0, 0, 0, 105, 11, 380, 164, 526, 0, 40, 133, 0, 152, 0, 64, 322, 71, 0, 329, 0, 769, 0, 401, 0, 142, 168, 0, 0, 0, 91, 0, 0, 0, 132, 0, 293, 0, 375, 351, 148, 170, 207, 595, 52, 96, 603, 46, 910, 3, 554, 43, 66, 0, 0, 550, 0, 1695, 33, 0, 0, 0, 51, 429, 138, 724, 311, 141, 2710], 4)
bfet_epilepsiae_loocv =      np.dot(    [11, 0, 0, 585, 0, 7, 0, 16, 0, 80, 0, 0, 0, 0, 0, 42, 196, 0, 0, 615, 0, 0, 259, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 394, 243, 350, 185, 627, 200, 302, 116, 198, 214, 75, 0, 0, 123, 44, 107, 768, 61, 181, 0, 0, 14, 31, 0, 117, 8, 10, 97, 7, 600, 7, 0, 0, 234, 0, 0, 0, 7, 85, 22, 215, 416, 236, 32, 420, 8, 220, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 448, 0, 12, 593, 30, 0, 29, 147, 0, 0, 49, 250, 0, 0, 0, 644, 125, 0, 0, 524, 28, 457, 0, 12, 0, 0, 0, 41, 104, 0, 0, 0, 0, 558, 0, 0, 619, 414, 0, 0, 438, 330, 5, 44, 546, 16, 490, 0, 60, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 648, 269, 0, 0, 492, 69, 0, 0, 26, 0, 0, 162, 0, 0, 566, 347, 196, 605, 0, 248, 106, 4, 295, 0, 0, 0, 235, 0, 0, 0, 0, 109, 424, 0, 0, 584, 498, 0, 0, 65, 12, 0, 322, 0, 0, 0, 0, 386, 155, 4, 0, 0, 359, 0, 332, 0, 0, 0, 0, 1, 0, 85, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 472, 59, 724, 0, 11, 393, 0, 0, 0, 268, 0, 0, 0, 0, 0, 4, 0, 317, 0, 0], 4)
bvib_epilepsiae_loocv =      np.dot(     [24, 520, 3, 585, 596, 6, 0, 1, 0, 230, 0, 8, 0, 0, 0, 3, 285, 0, 0, 614, 5, 0, 111, 661, 3, 0, 0, 0, 0, 0, 0, 0, 0, 290, 442, 135, 130, 78, 204, 154, 116, 0, 281, 273, 182, 0, 47, 42, 125, 739, 641, 382, 4, 61, 135, 214, 7, 331, 24, 7, 97, 19, 15, 11, 624, 0, 468, 0, 0, 0, 248, 298, 90, 383, 416, 20, 8, 429, 468, 215, 0, 0, 0, 256, 0, 58, 0, 0, 0, 0, 0, 0, 540, 0, 6, 718, 232, 56, 26, 16, 0, 26, 322, 144, 0, 220, 0, 416, 315, 0, 0, 289, 18, 364, 0, 308, 0, 6, 0, 28, 263, 0, 0, 0, 0, 29, 0, 744, 647, 414, 51, 0, 482, 577, 262, 287, 623, 318, 372, 0, 60, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 770, 94, 0, 0, 142, 657, 0, 473, 0, 0, 0, 293, 0, 51, 0, 170, 206, 547, 0, 246, 106, 8, 6, 0, 149, 0, 72, 0, 0, 0, 0, 630, 424, 112, 0, 258, 9, 0, 0, 26, 109, 0, 482, 0, 0, 0, 0, 58, 179, 227, 0, 0, 198, 296, 243, 401, 0, 0, 129, 504, 795, 128, 245, 0, 266, 247, 288, 0, 0, 790, 9, 0, 226, 0, 40, 0, 0, 565, 112, 728, 475, 0, 0, 0, 0, 0, 169, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0], 4)
bvib_epilepsiae_unseen =     np.dot(   [0, 0, 185, 282, 0, 0, 0, 0, 235, 13, 0, 0, 0, 0, 0, 0, 0, 24, 1889, 0, 0, 0, 0, 0, 0, 49, 418, 638, 1068, 140, 2933, 1811, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 2926, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 147, 160, 0, 12, 321, 221, 59, 0, 0, 96, 459, 30, 592, 112, 434, 593, 0, 604, 493, 132, 105, 266, 690, 112, 56, 134, 11, 0, 0, 22, 0, 0, 315, 0, 0, 53, 0, 326, 0, 0, 0, 580, 111, 474, 128, 0, 0, 0, 0, 224, 57, 493, 31, 45, 0, 0, 0, 0, 216, 0, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], 4)
bfcn_epilepsiae_loocv =      np.dot( [11, 0, 0, 5, 586, 107, 0, 151, 0, 136, 0, 0, 45, 0, 0, 370, 502, 108, 0, 614, 0, 0, 263, 10, 1, 0, 0, 0, 130, 0, 0, 0, 10, 342, 414, 322, 17, 188, 580, 154, 0, 198, 41, 75, 182, 0, 29, 583, 495, 406, 0, 63, 0, 76, 14, 207, 26, 212, 728, 34, 97, 6, 199, 6, 624, 0, 468, 0, 0, 0, 189, 297, 100, 1, 416, 343, 351, 436, 5, 480, 0, 0, 41, 7, 0, 0, 0, 0, 525, 0, 0, 0, 47, 0, 14, 12, 30, 61, 0, 90, 241, 514, 22, 247, 0, 224, 0, 632, 315, 0, 0, 126, 14, 425, 0, 398, 0, 14, 0, 58, 312, 0, 0, 0, 0, 590, 0, 0, 662, 216, 0, 0, 583, 332, 147, 331, 544, 328, 24, 0, 61, 14, 198, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 245, 0, 0, 0, 6, 0, 0, 0, 0, 181, 0, 647, 71, 0, 795, 505, 366, 0, 0, 0, 0, 0, 85, 0, 509, 7, 216, 173, 133, 562, 240, 66, 19, 284, 0, 0, 0, 24, 0, 0, 0, 0, 109, 40, 332, 0, 0, 16, 0, 0, 436, 0, 0, 513, 0, 0, 0, 0, 359, 147, 110, 0, 0, 198, 0, 340, 67, 107, 0, 102, 506, 467, 232, 29, 199, 0, 251, 0, 0, 0, 0, 7, 0, 226, 0, 0, 0, 0, 221, 782, 729, 0, 1, 0, 0, 0, 0, 167, 0, 0, 0, 0, 0, 614, 0, 44, 0, 0], 4)
bfcn_epilepsiae_unseen =     np.dot(    [0, 0, 0, 0, 0, 0, 99, 0, 252, 0, 0, 0, 0, 0, 0, 0, 0, 1907, 106, 0, 0, 0, 0, 0, 0, 49, 386, 2164, 1003, 500, 89, 323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 161, 0, 12, 0, 99, 59, 0, 391, 0, 140, 731, 568, 102, 180, 720, 0, 222, 230, 109, 264, 133, 103, 0, 51, 165, 148, 0, 0, 20, 0, 0, 205, 0, 0, 0, 0, 203, 0, 0, 75, 581, 5, 6, 52, 0, 0, 0, 0, 223, 0, 235, 769, 462, 0, 0, 0, 0, 0, 0, 0, 0, 0, 445, 0, 0, 4, 0, 0, 0, 0, 312, 0], 4)
bmmd_epilepsiae_loocv =      np.dot( [11, 319, 76, 30, 727, 213, 629, 282, 9, 133, 15, 296, 37, 137, 167, 726, 201, 150, 62, 4, 180, 531, 323, 722, 101, 414, 200, 0, 54, 0, 0, 15, 118, 216, 412, 385, 645, 685, 231, 160, 15, 195, 138, 205, 16, 102, 407, 146, 539, 404, 244, 288, 10, 164, 56, 209, 16, 305, 116, 45, 6, 0, 12, 10, 239, 5, 544, 477, 510, 496, 71, 58, 31, 130, 634, 340, 431, 553, 841, 21, 92, 426, 251, 0, 628, 78, 655, 0, 0, 112, 0, 53, 152, 20, 41, 31, 169, 34, 87, 7, 226, 326, 124, 488, 587, 700, 632, 285, 29, 11, 140, 227, 419, 101, 423, 435, 153, 207, 107, 116, 33, 198, 31, 368, 18, 51, 459, 304, 440, 800, 295, 661, 332, 0, 315, 550, 70, 139, 41, 12, 9, 278, 225, 89, 2, 23, 49, 48, 15, 685, 270, 334, 92, 795, 355, 47, 473, 139, 304, 232, 0, 88, 44, 219, 714, 265, 688, 795, 509, 524, 0, 311, 736, 23, 27, 704, 368, 175, 105, 632, 469, 0, 362, 0, 476, 29, 595, 180, 170, 173, 87, 449, 311, 30, 216, 34, 510, 6, 36, 12, 123, 111, 8, 3, 0, 403, 192, 0, 281, 16, 460, 280, 110, 190, 20, 139, 223, 23, 0, 104, 468, 88, 314, 667, 135, 220, 0, 270, 11, 15, 400, 259, 843, 12, 296, 247, 330, 13, 272, 0, 220, 66, 769, 7, 411, 0, 277, 465, 3, 164, 2, 39, 634, 27, 92, 66, 31, 425, 764, 0], 4)
bmmd_epilepsiae_unseen =     np.dot(    [0, 0, 0, 1, 0, 0, 0, 0, 88, 17, 3, 3, 366, 613, 0, 0, 0, 1244, 18, 0, 0, 0, 0, 0, 0, 1650, 436, 3105, 366, 43, 1292, 1905, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 2711, 0, 0, 0, 0, 0, 0, 843, 0, 0, 0, 459, 3, 160, 4, 157, 42, 79, 6, 32, 63, 13, 181, 85, 177, 30, 30, 98, 0, 660, 0, 446, 250, 341, 321, 141, 208, 209, 219, 124, 726, 117, 140, 69, 400, 32, 314, 702, 171, 0, 102, 120, 0, 7, 273, 8, 95, 492, 186, 0, 717, 0, 33, 228, 56, 231, 765, 596, 0, 1, 0, 0, 0, 0, 4, 0, 0, 507, 615, 296, 456, 2, 4, 6, 182, 0, 0], 4)
proposed_epilepsiae_unseen = np.dot([0, 0, 0, 0, 0, 0, 0, 0, 88, 33, 0, 0, 0, 0, 0, 0, 0, 28, 114, 0, 0, 0, 0, 0, 0, 1550, 416, 3108, 504, 26, 44, 225, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5, 0, 0, 153, 155, 0, 0, 322, 18, 83, 0, 431, 0, 146, 24, 549, 35, 115, 615, 0, 176, 148, 459, 451, 2, 431, 0, 97, 144, 0, 0, 0, 525, 73, 5, 313, 0, 172, 0, 201, 238, 0, 58, 195, 577, 2, 3, 192, 0, 780, 0, 0, 234, 0, 0, 0, 458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 635, 0, 0, 0, 0, 2, 0], 4)
print("Mean: ")
print(np.mean(proposed_epilepsiae_loocv))
# print(np.mean(proposed_epilepsiae_unseen))
# print(np.mean(bfet_epilepsiae_unseen ))
print(np.mean(bfet_epilepsiae_loocv ))
print(np.mean(bvib_epilepsiae_loocv ))
# print(np.mean(bvib_epilepsiae_unseen ))
print(np.mean(bfcn_epilepsiae_loocv ))
# print(np.mean(bfcn_epilepsiae_unseen ))
print(np.mean(bmmd_epilepsiae_loocv ))
# print(np.mean(bmmd_epilepsiae_unseen ))


def plot_box():
    # fig, ax = plt.subplots(figsize=(8, 6))
    # colors = ['pink', 'lightblue', 'lightgreen']
    # bplot = ax.boxplot([proposed, baseline, manual], notch=False, whis=[5, 95], labels=['Proposed', 'C-CNN', 'Manual MMD'])
    # for patch, color in zip(bplot['boxes'], colors):
    #     patch.set_facecolor(color)

    # plt.boxplot([proposed_epilepsiae, baseline_epilepsiae, manual_epilepsiae], whis=[5, 95])
    # ax.set_xticks(ticks=[1,2,3], fontsize=16)
    # plt.ylim([-20, 3600])
    # plt.yticks(ticks=np.arange(0, 3601, step=600), labels=[" {}".format(str(i)) for i in np.arange(0, 61, step=10)],
    #            fontsize=14)
    # plt.ylabel('Time (min)', fontsize=16)
    # plt.style.use('ggplot')
    boxprops = dict(linewidth=3, color='black')
    capprops = dict(linewidth=3)
    flierprops = dict(marker='o', markerfacecolor='black', markersize=6,
                      markeredgecolor='black')
    medianprops = dict(linewidth=3.5, color='firebrick')

    # all_data = [proposed_epilepsiae_loocv, bvib_epilepsiae_loocv, bmmd_epilepsiae_loocv,
    #             bfcn_epilepsiae_loocv, bfet_epilepsiae_loocv]
    # all_data = [proposed_epilepsiae_unseen, bvib_epilepsiae_unseen, bmmd_epilepsiae_unseen,
    #             bfcn_epilepsiae_unseen, bfet_epilepsiae_unseen]
    all_data = [proposed_chb_loocv, bvib_chb_loocv, bmmd_chb_loocv,
                bfcn_chb_loocv, bfet_chb_loocv]
    # all_data = [proposed_chb_unseen, bvib_chb_unseen, bmmd_chb_unseen,
    #             bfcn_chb_unseen, bfet_chb_unseen]
    labels = ['Proposed', 'B-VIB', 'B-MMD', 'B-FCN', 'B-FET']

    fig, ax1 = plt.subplots(nrows=1, ncols=1, figsize=(5, 6))
    fig.tight_layout()

    # rectangular box plot
    bplot1 = ax1.boxplot(all_data,
                         whis=[5, 95],
                         widths= 0.7,
                         patch_artist=True,  # fill with color
                         boxprops=boxprops, medianprops=medianprops, capprops=capprops, flierprops=flierprops,
                         whiskerprops=capprops)  # will be used to label x-ticks
    # ax1.set_title('Rectangular box plot')
    ax1.set_ylim([-20, 3600])
    ax1.set_ylabel('Time (min)', fontsize=16)
    ax1.set_yticks(ticks=np.arange(0, 3601, step=600))
    ax1.set_yticklabels(labels=[" {}".format(str(i)) for i in np.arange(0, 61, step=10)],
                        fontsize=14)
    ax1.set_xticklabels(labels=labels, fontsize=18, rotation=-90)
    # ax1.set_aspect(1.5)
    plt.grid(axis='y', color = 'black')
    # ax1.set_facecolor('gainsboro')

    # notch shape box plot
    # bplot2 = ax1.boxplot(all_data,
    #                      notch=True,  # notch shape
    #                      vert=True,  # vertical box alignment
    #                      patch_artist=True,  # fill with color
    #                      labels=labels)  # will be used to label x-ticks
    # ax1.set_title('Notched box plot')

    # fill with colors
    # colors = ['pink', 'lightblue', 'lightgreen', 'navajowhite', 'b']
    # colors = ["#9b59b6", "#3498db", "#e74c3c", "#34495e", "#2ecc71"]
    colors = ["#2596be", "#fdddc5", "#fbd3d1", "#bde1d1", "#858585"]
    for bplot in (bplot1, bplot1):
        for patch, color in zip(bplot['boxes'], colors):
            patch.set_facecolor(color)
    # plt.show()
    plt.savefig('../../output/images/CHB_LOOCV_v3.pdf', format='pdf', bbox_inches='tight')


def time_table():
    for time_expected in [0, 15, 30, 60, 150, 300]:
        for result, name in zip([proposed_epilepsiae, baseline_epilepsiae, manual_epilepsiae],
                                ["proposed", "CCNN", "MMD"]):
            cnt = np.count_nonzero(result <= time_expected)
            print("{} Time: {} = {},{:.2f}%".format(name, time_expected, cnt, cnt / 262.))


if __name__ == '__main__':
    tf.config.experimental.set_visible_devices([], 'GPU')
    # test_pat = 3
    # model_proposed = load_model(test_patient=test_pat, model_name='z_minus1_v52')
    # model_baseline = load_model(test_patient=test_pat, model_name='Anthony_v53')
    # for test_pat in range(1, 24):
    #     predict_(test_patient=test_pat, model_proposed=model_proposed, model_baseline=model_baseline)
    plot_box()
    # time_table()
