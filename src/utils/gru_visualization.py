import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from utils.data import dataset_training, get_non_seizure_signal, get_epilepsiae_seizures, get_epilepsiae_test, \
    get_new_conv_w, get_epilepsiae_non_seizure, build_dataset_pickle as test_dataset
from vae_mmd import plot_mmd
from scipy.signal import savgol_filter

from scipy.ndimage import gaussian_filter1d


STATE_LEN = 899


def load_model(test_patient):
    arch = 'vae_free'
    subdirname = "../../temp/vae_mmd/integrated/{}/{}/z_minus1_v52".format(1024, arch)
    save_path = '{}/model/test_{}/saved_model/'.format(subdirname, test_patient)
    trained_model = tf.keras.models.load_model(save_path)
    intermediate_model = tf.keras.models.Model(inputs= trained_model.input,
                                               outputs=trained_model.get_layer('conv_interval').output)
    return intermediate_model


def predict_(test_patient, model):
    sessions = get_epilepsiae_test(test_patient, root='../../')
    for node in sessions.keys():
        X = sessions[node]['data']
        y_true = sessions[node]['label']

        if np.sum(y_true) == 0:
            continue

        X_section = X
        y_true_section = y_true

        X_section = np.expand_dims(X_section, 0)
        X_edge = get_epilepsiae_non_seizure(test_patient, state_len=STATE_LEN, root='../..')
        X_section = np.concatenate((X_edge, X_section, X_edge), axis=1)

        mmd_predicted = model.predict(X_section)
        for idx in range(9):
            subdirname = "../../output/Conv/"
            mmd_edge_free = mmd_predicted[0, STATE_LEN:-STATE_LEN, idx]
            mmd_maximum = [np.argmax(mmd_edge_free)]
            name = "{}_{}".format(node, idx)
            plot_mmd(mmd_edge_free, mmd_maximum, y_true_section, name, subdirname)


def plot_loss():
    train_prop = [0.07395225, 0.06909066, 0.068582386, 0.06630091, 0.063985184, 0.06426628, 0.06658931, 0.059268847,
             0.05781046, 0.05774517, 0.055948384, 0.054986846, 0.055713568, 0.057495274, 0.057696924, 0.05247025,
             0.05077579, 0.057280157, 0.05039756, 0.052063618, 0.050503626, 0.04881094, 0.0491899, 0.058053352,
             0.04965144, 0.046025872, 0.049840588, 0.05534634, 0.05308451, 0.043698166, 0.04635534, 0.045784563,
             0.04253897, 0.04106991, 0.042335063, 0.04617808, 0.04012497, 0.040421426, 0.039329275, 0.050366]
    val_prop = [0.04254984, 0.04109845, 0.0414726, 0.040244382, 0.0377069, 0.033698905, 0.035142835, 0.03358663, 0.030590137,
           0.034239404, 0.030521324, 0.031657856, 0.033846598, 0.032659728, 0.031011075, 0.029501917, 0.028027873,
           0.031753477, 0.03017194, 0.029849041, 0.028522674, 0.032253243, 0.036512762, 0.03662708, 0.027777221,
           0.02935879, 0.032486405, 0.02919231, 0.026753126, 0.03454768, 0.0330078, 0.03620705, 0.036402293,
           0.033403143, 0.033009045, 0.02890453, 0.030994445, 0.033234607, 0.035094086, 0.030933877]

    train_base = [0.52083206, 0.1196586, 0.11200529, 0.1053212, 0.104925, 0.098941684, 0.10587514, 0.096913636, 0.09808799,
             0.1014787, 0.10630019, 0.09369183, 0.09551011, 0.09762837, 0.097065486, 0.09475307, 0.090549886, 0.0973085,
             0.091989845, 0.092886716, 0.09149998, 0.10709321, 0.09341329, 0.09586065, 0.095532216, 0.09471126,
             0.09162049, 0.09195296, 0.09580811, 0.09451415, 0.08700589, 0.09021051, 0.093469724, 0.08847891,
             0.090307325, 0.095476076, 0.09025919, 0.087405354, 0.088617474, 0.09422609, 0.08836369, 0.10291068,
             0.09048625, 0.09200137, 0.08779511, 0.09500327, 0.096976124, 0.09163543, 0.09246419, 0.092813686,
             0.088881925, 0.09697028, 0.11836651, 0.090211675, 0.0879712, 0.08409023, 0.08478896, 0.093660735,
             0.090448156, 0.08954938, 0.088485256, 0.10106251, 0.09517251, 0.08580355, 0.0870314, 0.08398462,
             0.08561651, 0.08424238, 0.08865905, 0.08395282, 0.084838934, 0.08285469, 0.081421115, 0.08756486,
             0.089602694, 0.090755686, 0.08583758, 0.08553981, 0.0843123, 0.092989184, 0.08716219, 0.08785896,
             0.09425645, 0.086480774, 0.09260213, 0.08590562, 0.087602094, 0.08337772, 0.07882952, 0.08453588,
             0.08433725, 0.08715196, 0.08450903, 0.08159574, 0.087880485, 0.08513257, 0.08275791, 0.0917782, 0.08717252,
             0.08294147, 0.0839274, 0.08707224, 0.07891113, 0.07937355, 0.096113205, 0.080377325, 0.07830183,
             0.09034113, 0.083907716, 0.077934705, 0.08182656, 0.07862154, 0.07921782, 0.083507635, 0.081402265,
             0.081055544, 0.084661715, 0.087250486, 0.089489795, 0.083612144, 0.081267886, 0.08088148, 0.08477335,
             0.08267824, 0.08071196, 0.09097456, 0.08358387, 0.088266626, 0.08286516, 0.08290614, 0.09139642,
             0.07702831, 0.07898252, 0.079847306, 0.07541753, 0.16978452, 0.076773785, 0.08062983, 0.08839868,
             0.07547139, 0.08059258, 0.07841286, 0.086733796, 0.083155945, 0.090488724, 0.08646118, 0.08015382,
             0.079422586, 0.08254533, 0.07539298, 0.12082596, 0.0888551, 0.082551636, 0.08084516, 0.07516962,
             0.07841156, 0.075352706, 0.081390746, 0.08650189, 0.07736235, 0.0884088, 0.08138773, 0.07291698,
             0.077434175, 0.07993489, 0.07725807, 0.08021564, 0.08240168, 0.07632985, 0.07939827, 0.079024404,
             0.078352794, 0.07804806, 0.081402756, 0.08288535, 0.08046122, 0.078961074, 0.08064328, 0.074443854,
             0.11007185, 0.08032013, 0.081613794, 0.08039204, 0.079350054, 0.07730517, 0.074544124, 0.074060865,
             0.07769262, 0.07554182, 0.08126892, 0.09413766, 0.0791492, 0.0772706, 0.091529824, 0.07636194, 0.07714637,
             0.09078947, 0.07966791, 0.07425546, 0.07993129, 0.07833743, 0.072253436, 0.07584846, 0.083246715,
             0.07285532, 0.086594544, 0.07670656, 0.10069587, 0.07720286, 0.08115494, 0.09781959, 0.12928872,
             0.07574772, 0.08155216, 0.07304798, 0.084381305, 0.07443423, 0.07826742, 0.095467076, 0.07775182,
             0.07352593, 0.07525908, 0.073240675, 0.08473581, 0.08582784, 0.074330986, 0.07274489, 0.082074836,
             0.075665526, 0.07262347, 0.07514907, 0.074405245, 0.0727587, 0.07623054, 0.07695377, 0.075112164,
             0.07459782, 0.08044473, 0.07006979, 0.075128295, 0.07248483, 0.07793776, 0.072612524, 0.07409192,
             0.07270967, 0.07427032, 0.096481755, 0.06877063, 0.08918701, 0.07346556, 0.082594596, 0.082841635,
             0.07852837, 0.07369278, 0.06934076, 0.07207492, 0.08651866, 0.08673875, 0.072696075, 0.07340962,
             0.08880994, 0.0716957, 0.07075674, 0.07654753, 0.07345536, 0.0684975, 0.07546634, 0.07809692, 0.079813294,
             0.07633795, 0.077926375, 0.06902693, 0.073680766, 0.07493346, 0.07019608, 0.07883594, 0.07168084,
             0.070496075, 0.07470401, 0.072760545, 0.067591205, 0.07521219, 0.072091796, 0.078576684, 0.07176995,
             0.078152016, 0.07462978, 0.074939124, 0.07243141, 0.073777236, 0.07259013, 0.07416128, 0.071086116,
             0.07071887, 0.07767055, 0.06868288, 0.06873018, 0.07087267, 0.0701093, 0.07334659]
    val_base = [0.5020043, 0.089466915, 0.07924723, 0.07781518, 0.059109144, 0.065413035, 0.061733454, 0.0551374,
           0.057963967, 0.060306206, 0.06108953, 0.059084643, 0.048019145, 0.05943889, 0.055680603, 0.05086951,
           0.055492204, 0.058159478, 0.058942445, 0.05099896, 0.058436166, 0.083491094, 0.04987962, 0.053181197,
           0.050872814, 0.060927432, 0.058820702, 0.060640946, 0.051386893, 0.05062463, 0.05720425, 0.04596097,
           0.05519868, 0.05436398, 0.052268606, 0.057071857, 0.047375042, 0.05335102, 0.049409047, 0.06078676,
           0.053381808, 0.07584752, 0.04949083, 0.04835726, 0.048196122, 0.053233597, 0.050486542, 0.055621807,
           0.05104118, 0.05113377, 0.055828985, 0.056021385, 0.12321867, 0.053002562, 0.051269576, 0.04542531,
           0.07399887, 0.06150893, 0.05333474, 0.057078335, 0.04601025, 0.057251003, 0.0700073, 0.06144415, 0.05934414,
           0.053755566, 0.053123873, 0.050647873, 0.05117453, 0.048627995, 0.049285233, 0.052102044, 0.049016185,
           0.055028908, 0.048120245, 0.055807184, 0.05548036, 0.05621013, 0.04923209, 0.05332462, 0.05266572,
           0.052288484, 0.05644733, 0.052165262, 0.05800575, 0.053696733, 0.05066855, 0.05545108, 0.05956775,
           0.05413663, 0.05173765, 0.058539826, 0.060099248, 0.051804557, 0.060329743, 0.054630958, 0.051352933,
           0.073430166, 0.05609961, 0.05315758, 0.062075447, 0.06605376, 0.05820031, 0.04995446, 0.06251077,
           0.058151834, 0.050433453, 0.05547491, 0.05421716, 0.050307374, 0.05322907, 0.05543855, 0.07480004,
           0.054997645, 0.05365269, 0.07493731, 0.05677552, 0.05854975, 0.059031665, 0.05192788, 0.051985398,
           0.060526446, 0.04972071, 0.05307567, 0.05349179, 0.061358817, 0.06003731, 0.058558483, 0.056807052,
           0.05468316, 0.06137242, 0.051581524, 0.058444433, 0.05442464, 0.05854093, 0.14330566, 0.058864016,
           0.050315753, 0.07838259, 0.051424284, 0.056496993, 0.054843914, 0.05553218, 0.061102726, 0.062429868,
           0.05270827, 0.05641392, 0.056541543, 0.051835727, 0.065593354, 0.08513139, 0.06613664, 0.058717847,
           0.057557207, 0.05946717, 0.060118627, 0.060349513, 0.05389943, 0.078312986, 0.058808178, 0.064013556,
           0.05460284, 0.05473055, 0.05681592, 0.056271598, 0.0658741, 0.055820424, 0.057541672, 0.065840244,
           0.08371306, 0.05343022, 0.054205827, 0.054875866, 0.05825264, 0.060322974, 0.05683794, 0.05669376,
           0.060810804, 0.061292574, 0.11464621, 0.067369185, 0.055402577, 0.05804816, 0.05775185, 0.05102325,
           0.05592071, 0.055342022, 0.058230948, 0.058472704, 0.060755007, 0.08740185, 0.054247513, 0.05840663,
           0.07338461, 0.05704576, 0.059385546, 0.07783497, 0.058396626, 0.058004353, 0.057551123, 0.06957239,
           0.059099108, 0.057675503, 0.057562087, 0.055255603, 0.06580048, 0.08430284, 0.074671924, 0.059318233,
           0.051508408, 0.08282881, 0.1479639, 0.060910143, 0.06059172, 0.059184305, 0.070214815, 0.062304683,
           0.07729798, 0.08131841, 0.057672426, 0.06087031, 0.064405724, 0.057762768, 0.06909359, 0.060156766,
           0.058281504, 0.059881516, 0.061794966, 0.06742293, 0.058622945, 0.069625676, 0.060985472, 0.056116026,
           0.0744938, 0.063494876, 0.06645042, 0.05708855, 0.056665257, 0.0584413, 0.05426979, 0.059506766, 0.06536117,
           0.05973473, 0.06203305, 0.06784658, 0.061516777, 0.09078354, 0.05913811, 0.07529236, 0.07003013, 0.07675605,
           0.058649324, 0.06824911, 0.056860853, 0.071294606, 0.06187921, 0.06560796, 0.06866782, 0.07303648,
           0.061657105, 0.07840324, 0.065001816, 0.054457754, 0.088052735, 0.058075305, 0.062594615, 0.0610428,
           0.061810657, 0.083905384, 0.07071594, 0.0697561, 0.061709996, 0.058065094, 0.060289044, 0.07324673,
           0.06097944, 0.06929264, 0.057809453, 0.06035659, 0.062389344, 0.0630463, 0.0616872, 0.064747795, 0.06935504,
           0.05865255, 0.066744514, 0.07017307, 0.06297614, 0.062701955, 0.058726676, 0.055974025, 0.065646455,
           0.055242352, 0.06023639, 0.060879372, 0.060984746, 0.062342912, 0.059890207, 0.06263335, 0.064696096]

    plt.figure(figsize=(10,6))

    plt.plot(gaussian_filter1d(train_prop, sigma=5), 'r')
    plt.plot(train_prop, '--r')

    plt.plot(gaussian_filter1d(val_prop, sigma=5), 'g')
    plt.plot(val_prop, '--g')

    plt.plot(gaussian_filter1d(train_base, sigma=5), 'b')
    # plt.plot(train_base, '--b')

    plt.plot(gaussian_filter1d(val_base, sigma=5), 'c')
    # plt.plot(val_base, '--c')
    plt.legend()
    plt.show()


if __name__ == "__main__":
    tf.config.experimental.set_visible_devices([], 'GPU')
    # test_pat = 'pat_102'
    # model = load_model(1)
    # predict_(test_pat, model)
    plot_loss()
